// Mocks generated by Mockito 5.2.0 from annotations
// in sl_social_auth/test/sl_social_auth_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:firebase_auth/firebase_auth.dart' as _i6;
import 'package:firebase_core/firebase_core.dart' as _i5;
import 'package:google_sign_in/google_sign_in.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sl_social_auth/core/sl_auth_response.dart' as _i2;
import 'package:sl_social_auth/sl_social_auth.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeSlAuthResponse_0<T> extends _i1.Fake
    implements _i2.SlAuthResponse<T> {}

/// A class which mocks [SlSocialAuth].
///
/// See the documentation for Mockito's code generation for more information.
class MockSlSocialAuth extends _i1.Mock implements _i3.SlSocialAuth {
  MockSlSocialAuth() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> initializedSocialAuth(
          {bool? ensureInitialized = false,
          String? name,
          _i5.FirebaseOptions? firebaseOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#initializedSocialAuth, [], {
            #ensureInitialized: ensureInitialized,
            #name: name,
            #firebaseOptions: firebaseOptions
          }),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<_i2.SlAuthResponse<_i6.UserCredential?>> signInWithGoogle(
          {_i7.SignInOption? signInOption = _i7.SignInOption.standard,
          List<String>? scope = const [],
          String? hostedDomain,
          String? clientId,
          String? serverClientId}) =>
      (super.noSuchMethod(
          Invocation.method(#signInWithGoogle, [], {
            #signInOption: signInOption,
            #scope: scope,
            #hostedDomain: hostedDomain,
            #clientId: clientId,
            #serverClientId: serverClientId
          }),
          returnValue: Future<_i2.SlAuthResponse<_i6.UserCredential?>>.value(
              _FakeSlAuthResponse_0<_i6.UserCredential?>())) as _i4
          .Future<_i2.SlAuthResponse<_i6.UserCredential?>>);
  @override
  _i4.Future<_i2.SlAuthResponse<_i6.UserCredential?>> signInWithFacebook() =>
      (super.noSuchMethod(Invocation.method(#signInWithFacebook, []),
          returnValue: Future<_i2.SlAuthResponse<_i6.UserCredential?>>.value(
              _FakeSlAuthResponse_0<_i6.UserCredential?>())) as _i4
          .Future<_i2.SlAuthResponse<_i6.UserCredential?>>);
  @override
  _i4.Future<_i2.SlAuthResponse<_i6.UserCredential?>> signInWithTwitter(
          {String? apiKey, String? apiSecretKey, String? redirectURI}) =>
      (super.noSuchMethod(
          Invocation.method(#signInWithTwitter, [], {
            #apiKey: apiKey,
            #apiSecretKey: apiSecretKey,
            #redirectURI: redirectURI
          }),
          returnValue: Future<_i2.SlAuthResponse<_i6.UserCredential?>>.value(
              _FakeSlAuthResponse_0<_i6.UserCredential?>())) as _i4
          .Future<_i2.SlAuthResponse<_i6.UserCredential?>>);
  @override
  String generateNonce([int? length = 32]) =>
      (super.noSuchMethod(Invocation.method(#generateNonce, [length]),
          returnValue: '') as String);
  @override
  String sha256ofString(String? input) =>
      (super.noSuchMethod(Invocation.method(#sha256ofString, [input]),
          returnValue: '') as String);
  @override
  _i4.Future<_i2.SlAuthResponse<_i6.UserCredential?>> signInWithApple() =>
      (super.noSuchMethod(Invocation.method(#signInWithApple, []),
          returnValue: Future<_i2.SlAuthResponse<_i6.UserCredential?>>.value(
              _FakeSlAuthResponse_0<_i6.UserCredential?>())) as _i4
          .Future<_i2.SlAuthResponse<_i6.UserCredential?>>);
  @override
  _i4.Future<bool> signOut() =>
      (super.noSuchMethod(Invocation.method(#signOut, []),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
}
